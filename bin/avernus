#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-

import sys
import os
import gtk
import optparse
import logging

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'avernus'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

import avernus
from avernus import config
from avernus.plugin_engine import PluginEngine
from avernus.plugin_api    import PluginAPI


def init_logger(debug=False):
    console_format = "%(levelname)-8s: %(message)s"
    loggerlevel = logging.INFO
    if debug:
        loggerlevel = logging.DEBUG
        console_format = "%(asctime)s,%(msecs)3d:" + console_format
        console_format += " (%(name)s)" # add module name
    datefmt = "%H:%M:%S"
    # logging to terminal
    logging.basicConfig(level=loggerlevel, format=console_format,
            datefmt=datefmt)

def init_translations():
    import locale
    #locale.setlocale(locale.LC_ALL, '')
    import gettext
    from os.path import pardir, abspath, dirname, join

    GETTEXT_DOMAIN = 'avernus'
    LOCALE_PATH = abspath(join(dirname(__file__), pardir, 'locales'))
    if not os.path.isdir(LOCALE_PATH):
        LOCALE_PATH = '/usr/share/locale'

    # setup translation
    languages_used = []

    lc, encoding = locale.getdefaultlocale()
    if lc:
        languages_used = [lc]
    lang_in_env = os.environ.get('LANGUAGE', None)
    if lang_in_env:
        languages_used.extend(lang_in_env.split())

    gettext.bindtextdomain(GETTEXT_DOMAIN, LOCALE_PATH)
    gettext.textdomain(GETTEXT_DOMAIN)

    translation = gettext.translation(GETTEXT_DOMAIN, LOCALE_PATH,
                                      languages=languages_used,
                                      fallback=True)
    import __builtin__
    __builtin__._ = translation.gettext

def init_icons():
    from avernus.gui.icons import IconManager
    icons = IconManager()
    path = os.path.join(config.getdatapath(),'images')
    iconNames = [
    'avernus','tags','tag','watchlists','watchlist','portfolio',
    'portfolios', 'index', 'indices','arrow_down','arrow_med_down',
    'arrow_up','arrow_med_up','arrow_right','A','F','plugin','fund','stock',
    'etf','accounts','account','onvista','yahoo'
    ]
    for name in iconNames:
        icons.add_icon_name_from_directory(name, path)
    #icons.add_icon_name_from_directory('tag', path)
    #icons.add_icon_name_from_directory('tags', path)
    #icons.add_stock_from_directory('avernus-chart', path)
    gtk.window_set_default_icon_name('avernus')


def init_plugin_engine(api):
    pengine = PluginEngine(config.plugins_path, api)
    pengine.load_plugins()
    pengine.enable_from_config()
    return pengine


def start(db_file = None):
    init_icons()

    if db_file == None:
        from avernus import config
        configs = config.avernusConfig()
        db_file = configs.get_option('database file')

    from avernus.objects import model, store
    from avernus.controller import controller
    model.store = store.Store(db_file)
    controller.createTables()
    controller.initialLoading()

    from avernus.gui.mainwindow import MainWindow
    from avernus.datasource_manager import DatasourceManager
    dsm = DatasourceManager()
    window = MainWindow()
    api = PluginAPI(window, dsm)
    window.pengine = init_plugin_engine(api)
    controller.datasource_manager = dsm

    from avernus.network_manager import DBusNetwork
    DBusNetwork()
    gtk.main()

if __name__ == "__main__":
    init_translations()
    # Support for command line options.
    parser = optparse.OptionParser(version='%prog '+avernus.__version__)
    parser.add_option("-d", "--debug", action="store_true", dest="debug", help=_("enable debug output"))
    parser.add_option("-f", "--file",  dest="datafile", help="set database file")
    (options, args) = parser.parse_args()

    init_logger(options.debug)

    #gobject.threads_init()
    gtk.gdk.threads_init()
    #run the application
    start(options.datafile)
